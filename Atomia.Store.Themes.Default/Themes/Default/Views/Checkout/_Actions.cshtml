@using Atomia.Store.AspNetMvc.Models
@{
    var orderFlow = (OrderFlowModel)ViewBag.OrderFlow;
    var routeValues = orderFlow.IsQueryStringBased ? new { flow = orderFlow.Name } : null;
}

<p class="actions" style="display: block;">
    @if (ViewBag.RecaptchaEnabled)
    {
        <div id="reCaptchaContainer">
            <div id="reCaptchaPlaceholder"></div>
            <div id="reCaptchaMessageContainer" style="padding: 5px;">
                <label id="reCaptchaMessage" runat="server" clientidmode="static"></label>
            </div>
        </div>
    }

    <span class="button large disabled" data-bind="visible: Atomia.VM.termsOfService.disableCheckoutAction()">@Html.CommonResource("Back")</span>
    @Html.RouteLink(Html.CommonResource("Back"), orderFlow.CurrentStep.Previous, routeValues, new { id = "back_step", @class = "button large", style = "display: inline-block;", data_bind = "visible: !Atomia.VM.termsOfService.disableCheckoutAction()" })
    <button type="button" class="button disabled icn_" style="vertical-align:top;" data-bind="visible: !cart.isEmpty() && cart.hasHostingPackage() && vatValidation.initialCheckDone() && Atomia.VM.termsOfService.disableCheckoutAction()">@Html.CommonResource("Checkout")</button>
    <button class="button green submit" style="vertical-align:top;" data-bind="attr: { type: '@ViewBag.RecaptchaEnabled' == 'True' ? 'button' : 'submit' }, visible: !cart.isEmpty() && cart.hasHostingPackage() && !vatValidation.initialCheckDone(), click: vatValidation.disableCheckoutAction">@Html.CommonResource("Checkout")</button>
    <button class="button green submit" style="vertical-align:top;" data-bind="attr: { type: '@ViewBag.RecaptchaEnabled' == 'True' ? 'button' : 'submit' }, visible: !cart.isEmpty() && cart.hasHostingPackage() && vatValidation.initialCheckDone() && !Atomia.VM.termsOfService.disableCheckoutAction()">@Html.CommonResource("Checkout")</button>
</p>